// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCallLogsParams creates a new GetCallLogsParams object
// with the default values initialized.
func NewGetCallLogsParams() *GetCallLogsParams {
	var ()
	return &GetCallLogsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCallLogsParamsWithTimeout creates a new GetCallLogsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCallLogsParamsWithTimeout(timeout time.Duration) *GetCallLogsParams {
	var ()
	return &GetCallLogsParams{

		timeout: timeout,
	}
}

// NewGetCallLogsParamsWithContext creates a new GetCallLogsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCallLogsParamsWithContext(ctx context.Context) *GetCallLogsParams {
	var ()
	return &GetCallLogsParams{

		Context: ctx,
	}
}

// NewGetCallLogsParamsWithHTTPClient creates a new GetCallLogsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCallLogsParamsWithHTTPClient(client *http.Client) *GetCallLogsParams {
	var ()
	return &GetCallLogsParams{
		HTTPClient: client,
	}
}

/*GetCallLogsParams contains all the parameters to send to the API endpoint
for the get call logs operation typically these are written to a http.Request
*/
type GetCallLogsParams struct {

	/*CallID
	  Opaque, unique Call ID.

	*/
	CallID string
	/*FnID
	  Opaque, unique Function ID.

	*/
	FnID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get call logs params
func (o *GetCallLogsParams) WithTimeout(timeout time.Duration) *GetCallLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get call logs params
func (o *GetCallLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get call logs params
func (o *GetCallLogsParams) WithContext(ctx context.Context) *GetCallLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get call logs params
func (o *GetCallLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get call logs params
func (o *GetCallLogsParams) WithHTTPClient(client *http.Client) *GetCallLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get call logs params
func (o *GetCallLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCallID adds the callID to the get call logs params
func (o *GetCallLogsParams) WithCallID(callID string) *GetCallLogsParams {
	o.SetCallID(callID)
	return o
}

// SetCallID adds the callId to the get call logs params
func (o *GetCallLogsParams) SetCallID(callID string) {
	o.CallID = callID
}

// WithFnID adds the fnID to the get call logs params
func (o *GetCallLogsParams) WithFnID(fnID string) *GetCallLogsParams {
	o.SetFnID(fnID)
	return o
}

// SetFnID adds the fnId to the get call logs params
func (o *GetCallLogsParams) SetFnID(fnID string) {
	o.FnID = fnID
}

// WriteToRequest writes these params to a swagger request
func (o *GetCallLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param callID
	if err := r.SetPathParam("callID", o.CallID); err != nil {
		return err
	}

	// path param fnID
	if err := r.SetPathParam("fnID", o.FnID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
